def is_safe(board, row, col, n):
    
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1

            if solve_n_queens(board, col + 1, n):
                return True

            board[i][col] = 0

    return False

def print_solution(board, n):
    for i in range(n):
        row = ""
        for j in range(n):
            if board[i][j] == 1:
                row += " Q "
            else:
                row += " . "
        print(row)
    print("\n")

def solve_n_queens_problem(n):
    board = [[0 for _ in range(n)] for _ in range(n)]

    if not solve_n_queens(board, 0, n):
        print("راه‌حلی وجود ندارد.")
        return False

    print_solution(board, n)
    return True

solve_n_queens_problem(8)
